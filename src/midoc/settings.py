# -*- coding: utf-8 -*-
"""
Django settings for midoc project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import ast
import logging
import os
import urllib.parse

import culqipy
import dj_database_url
import raven

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'dev')
PROJECT = os.environ.get('PROJECT')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR_PROJECT = (os.path.dirname(BASE_DIR))
PROJECT_DIR = os.path.abspath(os.path.join(BASE_DIR, os.pardir))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    'SECRET_KEY',
    'yca9&g!&qgb5n#4j-0^n^b3=1oemn*&(oo@ez@k!4qd8+yteor',
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ast.literal_eval(os.environ.get('DEBUG', 'False'))
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ALLOWED_HOSTS = ['*']

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')

AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')

AWS_SQS_ACCESS_KEY = os.environ.get('AWS_SQS_ACCESS_KEY', '')

AWS_SQS_SECRET_ACCESS_KEY = os.environ.get('AWS_SQS_SECRET_ACCESS_KEY', '')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'social_django',
    'customuser',
    'plans',
    'medicalhistory',
    'competition',
    'rest_framework_docs',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if not DEBUG:
    # Sentry recommends putting this as high in the chain as possible.
    MIDDLEWARE = [
        'raven.contrib.django.raven_compat.middleware.'
        'SentryResponseErrorIdMiddleware',
    ] + MIDDLEWARE

ROOT_URLCONF = 'midoc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'midoc.wsgi.application'

# Cache

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get(
            'REDIS_CACHE_URL', 'redis://127.0.0.1:6379/0',
        ),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'IGNORE_EXCEPTIONS': True,
        },
    },
    'session': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get(
            'REDIS_SESSION_URL', 'redis://127.0.0.1:6379/1',
        ),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'IGNORE_EXCEPTIONS': True,
        },
    },
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
DATABASES = {
    'default': dj_database_url.parse(os.environ.get('DB_URL')),
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/
LANGUAGE_CODE = 'es-pe'

TIME_ZONE = 'America/Lima'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_ROOT = os.getenv(
    'STATIC_ROOT',
    os.path.join(BASE_DIR, 'staticfiles'),
)

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

AUTH_USER_MODEL = 'customuser.MyUser'

# CELERY.
CELERY_BROKER_URL = os.environ.get('BROKER_URL')
CELERY_TIMEZONE = TIME_ZONE
CELERY_ACCEPT_CONTENT = ['json', ]
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_CONTENT_ENCODING = 'utf-8'
CELERY_ENABLE_REMOTE_CONTROL = False
CELERY_SEND_EVENTS = False

if ENVIRONMENT != 'local':
    CELERY_BROKER_URL = 'sqs://{}:{}@'.format(
        urllib.parse.quote(AWS_SQS_ACCESS_KEY, safe=''),
        urllib.parse.quote(AWS_SQS_SECRET_ACCESS_KEY, safe=''),
    )
    CELERY_BROKER_TRANSPORT_OPTIONS = {
        'region': os.environ.get('AWS_SQS_REGION', ''),
        'polling_interval': 30,
        'queue_name_prefix': '{}-'.format(PROJECT),
        'visibility_timeout': 3600,
        # Number of seconds to sleep between unsuccessful polls,
        # default value is 30 seconds
    }

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'midoc.virtual@gmail.com'
EMAIL_HOST_PASSWORD = 'Midoc2017#'
SERVER_EMAIL = 'midoc.virtual@gmail.com'
CONTACT_EMAIL = 'midoc.virtual@gmail.com'
SECURITY_EMAIL_SENDER = 'midoc.virtual@gmail.com'
EMAIL_SENDER = 'midoc.virtual.gmail.com'
EMAIL_SEND = {
    'recomendacion': {
        'sender': EMAIL_SENDER,
        'title': 'Recomendacion a Midoc Virtual',
        'template': 'recomendacion.html',
    },

}

CORS_ORIGIN_ALLOW_ALL = True
SOCIAL_AUTH_FACEBOOK_KEY = '1703598716351333'
SOCIAL_AUTH_FACEBOOK_SECRET = '0816a573e38b2ed38888c144e433fa9f'
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'email,first_name,last_name',
}
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
APPSECRET_PROOF = False
AUTHENTICATION_BACKENDS = (
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR_PROJECT, 'media')
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework.filters.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter',
    ),
    'PAGE_SIZE': 15,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
}

if not DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = (
        'rest_framework.renderers.JSONRenderer',
    )
    # Sentry.
    INSTALLED_APPS.append(
        'raven.contrib.django.raven_compat',
    )
    RAVEN_CONFIG = {
        'dsn': os.getenv('SENTRY_DSN'),
        'release': raven.fetch_git_sha(PROJECT_DIR),
        'CELERY_LOGLEVEL': logging.INFO,
    }
    SENTRY_CELERY_LOGLEVEL = logging.INFO

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Access-Control-Allow-Origin',
)

culqipy.public_key = os.environ.get(
    'CULQI_PUBLIC_KEY', 'pk_test_hJ9NDkiUTQ0llKT5',
)
culqipy.secret_key = os.environ.get(
    'CULQI_SECRET_KEY', 'sk_test_USxgzKse4eWqmWV4',
)
